// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  createdTickets Tickets[] @relation("createdBy")
  updatedTickets Tickets[] @relation("updatedBy")

  @@map("users")
}

model Companies {
  id           Int            @id @default(autoincrement())
  name         String
  cnpj         String         @unique
  description  String
  locations    Locations[]
  responsibles Responsibles[]

  @@map("companies")
}

model Locations {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  address      Addresses      @relation(fields: [adressId], references: [id])
  adressId     Int
  company      Companies      @relation(fields: [companyId], references: [id])
  companyId    Int
  responsibles Responsibles[]
  Ticket       Tickets[]

  @@map("locations")
}

model Responsibles {
  id         Int        @id @default(autoincrement())
  name       String
  phone      String
  cpf        String     @unique
  isIncharge Boolean?   @default(true)
  address    Addresses  @relation(fields: [addressId], references: [id])
  addressId  Int
  company    Companies? @relation(fields: [companyId], references: [id])
  companyId  Int?
  location   Locations? @relation(fields: [locationId], references: [id])
  locationId Int?

  @@map("responsible")
}

model Tickets {
  id            Int       @id @default(autoincrement())
  title         String    @unique
  creation_date DateTime
  update_date   DateTime
  createdBy     Users     @relation(name: "createdBy", fields: [createdById], references: [id])
  createdById   Int
  updatedBy     Users?    @relation(name: "updatedBy", fields: [updateById], references: [id])
  updateById    Int?
  location      Locations @relation(fields: [locationId], references: [id])
  locationId    Int
  status        Status    @default(PENDENTE)

  @@map("tickets")
}

model Addresses {
  id          Int            @id @default(autoincrement())
  street      String
  number      String
  district    String
  city        String
  state       String
  zipcode     String         @unique
  responsible Responsibles[]
  location    Locations[]
}

enum Status {
  PENDENTE
  PROGRESSO
  CONCLUIDO
}
